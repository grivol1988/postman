{
	"info": {
		"_postman_id": "89ddf98f-f354-4a31-a63b-9144af2f91e4",
		"name": "POSTMAN HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "The first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5.Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6.Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"console.log(resp);\r",
							"\r",
							"//7.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"resp name = req name Ivan\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Ivan\");\r",
							"});\r",
							"\r",
							"//8.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"resp age = req age 33\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"33\");\r",
							"});\r",
							"\r",
							" //9. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							" pm.test(\"resp salary = req salary 400\", function () {\r",
							"    pm.expect(resp.salary).to.eql(400);\r",
							"});\r",
							"\r",
							"//10. Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"console.log(req);\r",
							"\r",
							"//11. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"resp name = req name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//12. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"resp age = req age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//13. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"resp salary = req salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//14. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp.family);\r",
							"\r",
							"//15. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year = salary*4\", function() {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//17.Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//18.Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"console.log(resp);\r",
							"\r",
							"//19. Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"console.log(req);\r",
							"\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"//20. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"resp name = req name\", function () {\r",
							"    pm.expect(resp.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							" //21. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							" pm.test(\"resp age = req age\", function () {\r",
							"    pm.expect(resp.age).to.eql(query.age);\r",
							"});\r",
							"\r",
							"//22. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"resp salary = req salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+query.salary);\r",
							"});\r",
							"\r",
							"//23. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp.family);\r",
							"\r",
							" //24. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							" pm.test(\"Check that dog has name\", function() {\r",
							"    pm.expect(resp.family.pets.dog.name).exist;\r",
							"});\r",
							"\r",
							"//25. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							" pm.test(\"Check that dog has age\", function() {\r",
							"    pm.expect(resp.family.pets.dog.age).exist;\r",
							"});\r",
							"\r",
							" //26. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check that dog's name is Luky\", function() {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//33. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Check that dog's age is 4\", function() {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ivan&age=33&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//29.Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//30.Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"console.log(resp);\r",
							"\r",
							"//31. Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"console.log(req);\r",
							"\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							" //32. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							" pm.test(\"resp name = req name\", function () {\r",
							"    pm.expect(resp.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							"//33. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							" pm.test(\"resp age = req age\", function () {\r",
							"    pm.expect(resp.age).to.eql(+query.age);\r",
							"});\r",
							"\r",
							" //34. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(query.salary);\r",
							"\r",
							" //35. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(resp.salary);\r",
							"\r",
							" //36. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"// 37. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp.salary[1]);\r",
							"\r",
							" //38. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							" //39. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check 0 resp.salary=req.salary\", function() {\r",
							"    pm.expect(resp.salary[0]).to.eql(+query.salary);\r",
							"});\r",
							"\r",
							" //40. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check 1 resp.salary=req.salary*2\", function() {\r",
							"    pm.expect(+resp.salary[1]).to.eql(+query.salary*2);\r",
							"});\r",
							"\r",
							" //41. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check 2 resp.salary=req.salary*3\", function() {\r",
							"    pm.expect(+resp.salary[2]).to.eql(+query.salary*3);\r",
							"});\r",
							"\r",
							" //45. Передать в окружение ремённую переменную name\r",
							"\r",
							"pm.environment.set(\"name\", \"Ivan\");\r",
							"\r",
							" //46. Передать в окружение ремённую переменную age\r",
							"\r",
							"pm.environment.set(\"age\", \"33\");\r",
							"\r",
							" //47. Передать в окружение ремённую переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", \"400\");\r",
							"\r",
							" //48. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							" for (let key in resp.salary) {\r",
							"  console.log(resp.salary[key]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ivan&age=33&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" //6. Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"console.log(resp);\r",
							"\r",
							" //7. Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"console.log(req);\r",
							"\r",
							" //8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Check that resp.Json has start_qa_salary\", function() {\r",
							"    pm.expect(resp.start_qa_salary).exist;\r",
							"});\r",
							"\r",
							" //9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Check that resp.Json has qa_salary_after_6_months\", function() {\r",
							"    pm.expect(resp.qa_salary_after_6_months).exist;\r",
							"});\r",
							"\r",
							" //10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Check that resp.Json has qa_salary_after_12_months\", function() {\r",
							"    pm.expect(resp.qa_salary_after_12_months).exist;\r",
							"});\r",
							"\r",
							" //11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Check that resp.Json has qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).exist;\r",
							"});\r",
							"\r",
							" //12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Check that resp.Json has qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).exist;\r",
							"});\r",
							"\r",
							" //13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Check that resp.Json has person\", function() {\r",
							"    pm.expect(resp.person).exist;\r",
							"});\r",
							"\r",
							" //14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resp.start_qa_salary = req.start_qa_salary\", function() {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							" //15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resp.qa_salary_after_6_months = req.start_qa_salary*2\", function() {\r",
							"    pm.expect(+resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							" //16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resp.qa_salary_after_12_months = req.start_qa_salary*2.7\", function() {\r",
							"    pm.expect(+resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							" //17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resp.qa_salary_after_1.5_year = req.start_qa_salary*3.3\", function() {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							" //18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check resp.qa_salary_after_3.5_years = req.start_qa_salary*3.8\", function() {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							" //19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check that person 1 elenent u_name = req.salary\", function() {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							" //20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check that u_age = req.age\", function() {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							" //21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check that u_salary_5_years = req.salary*4.2\", function() {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							" //22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (let key in resp.person) {\r",
							"  console.log(key+\": \"+ resp.person[key]);\r",
							"};\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}